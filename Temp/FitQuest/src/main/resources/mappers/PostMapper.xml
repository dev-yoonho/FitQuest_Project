<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dualforce.fitquest.model.dao.PostDao">
    <!-- 게시글 등록 -->
    <insert id="insertPost" parameterType="PostDto" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO Post (user_id, category, title, content, attachment_path)
        VALUES (#{userId}, #{category}, #{title}, #{content}, #{attachmentPath})
    </insert>
    <!-- 게시글 조건 검색 -->
    <select id="selectPostsByConditions" parameterType="map" resultType="PostDto">
        SELECT
            p.post_id AS postId,
            p.user_id AS userId,
            u.nickname AS nickname,
            p.category AS category,
            p.title AS title,
            p.content AS content,
            p.attachment_path AS attachmentPath,
            p.created_at AS createdAt,
            p.views AS views,
            p.likes AS likes
        FROM Post p
        JOIN User u ON p.user_id = u.user_id
        WHERE 1=1
        <if test="title != null and title != ''">
            AND p.title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="content != null and content != ''">
            AND p.content LIKE CONCAT('%', #{content}, '%')
        </if>
        <if test="category != null and category != ''">
            AND p.category = #{category}
        </if>
        <if test="nickname != null and nickname != ''">
            AND u.nickname = #{nickname}
        </if>
        <choose>
            <when test="sortBy == 'created_at'">
                ORDER BY p.created_at
            </when>
            <when test="sortBy == 'created_at_reverse'">
                ORDER BY p.created_at DESC
            </when>
            <when test="sortBy == 'likes'">
                ORDER BY p.likes DESC
            </when>
            <when test="sortBy == 'views'">
                ORDER BY p.views DESC
            </when>
            <otherwise>
                ORDER BY p.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>
    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="PostDto">
        UPDATE Post
        SET category = #{category},
        title = #{title},
        content = #{content},
        attachment_path = #{attachmentPath}
    </update>
    <!-- 게시글 삭제 -->
    <delete id="deletePost" parameterType="int">
        DELETE
        FROM Post
        WHERE post_id = #{postId}
    </delete>
    <!-- 조회 수 증가 -->
    <update id="incrementViews" parameterType="int">
        UPDATE Post
        SET views = views + 1
        WHERE post_id = #{postId}
    </update>
    <!-- 추천 수 증가-->
    <update id="incrementLikes" parameterType="int">
        UPDATE Post
        SET likes = likes + 1
        WHERE post_id = #{postId}
    </update>
    <!-- 게시물 Id로 개별 조회-->
    <select id="selectPostById" parameterType="int" resultType="PostDto">
        SELECT *
        FROM Post
        WHERE post_id =  #{postId}
    </select>
    <!-- 조건 만족 게시글 검색 -->
    <select id="selectEligiblePosts" resultType="Integer">
        SELECT p.post_id
        FROM Post p
        LEFT JOIN Comment c ON p.post_id = c.post_id
        WHERE p.category = '질문'
        AND TIMESTAMPDIFF(HOUR, p.created_at, NOW()) >= 24
        GROUP BY p.post_id
        HAVING COUNT(c.comment_id) &lt;= 1;
    </select>
</mapper>
